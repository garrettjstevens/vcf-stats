#!/usr/bin/env python3
import argparse
import sys

__version__ = 0.1

args = None


def merge_stats(args):
	parse_params(args)


def plot_stats(args):
	parse_params(args)


def parse_params(args):
	""""""
	print(args)
	if args.subparser_name == 'plot':
		opts = {
			'pdf_plots': not args.rasterize,
			'use_sample_names': args.sample_names,
			'verbose': True,
			'make_pdf': not args.no_PDF,
			'make_plots': True,
			'merge': False,
			'args': ' '.join(sys.argv),
		}
	else:
		opts = {
			'pdf_plots': False,
			'use_sample_names': False,
			'verbose': True,
			'make_pdf': False,
			'make_plots': False,
			'merge': True,
			'args': ' '.join(sys.argv),
			'tex': {
				'slide3v': {'height1': '7cm', 'height2': '7cm',  'height3': '4.5cm'},
				'slide3h': {'width1': '15cm', 'width2': '10cm', 'width3': '8cm'}}
		}
	opts.update({
		'img_width': 11 / 2.54,
		'img_height': 10 / 2.54,
		'id2col': ['orange', 'red', 'darkgreen']
	})
	print(opts)


def main():
	global args
	parser = argparse.ArgumentParser(description='Work with stats generated by bcftools stats')
	parser.add_argument(
		'-v', '--version',
		action='version',
		version='plot-vcfstats v{}'.format(__version__))
	subparsers = parser.add_subparsers(dest='subparser_name')
	merge_subparser = subparsers.add_parser(
		'merge',
		description='Merge bcftools stats outputs',
		help='Merge outputs from a single VCF that was broken up')
	merge_subparser.set_defaults(func=merge_stats)
	merge_subparser.add_argument(
		'file.stats.txt',
		help='Files containing output from bcftools stats',
		metavar='<file>',
		type=argparse.FileType('r'),
		action='append',
		nargs='+')
	plot_subparser = subparsers.add_parser(
		'plot',
		description='Plot output from bcftools stats',
		help='Plot output from bcftools stats')
	plot_subparser.set_defaults(func=plot_stats)
	plot_subparser.add_argument(
		'output directory',
		metavar='<dir>',
		help='Output directory')
	plot_subparser.add_argument(
		'-T', '--main-title',
		help='Main title for the PDF',
		metavar='<title>',
		nargs=1)
	plot_subparser.add_argument(
		'-t', '--title',
		help='Identify files by these titles in plots (can be given multiple times)',
		metavar='<title>',
		nargs=1)
	plot_subparser.add_argument(
		'-s', '--sample-names',
		help=' Use sample names for xticks rather than numeric IDs',
		action='store_true')
	pdf_group = plot_subparser.add_mutually_exclusive_group()
	pdf_group.add_argument(
		'-P', '--no-PDF',
		help='Skip the PDF creation step',
		action='store_true')
	pdf_group.add_argument(
		'-r', '--rasterize',
		help='Rasterize PDF images for fast rendering',
		action='store_true')
	plot_subparser.add_argument(
		'stats_files',
		help='File(s) containing output from bcftools stats',
		metavar='<file>',
		type=argparse.FileType('r'),
		action='append',
		nargs='+')
	args = parser.parse_args()
	args.func(args)

if __name__ == '__main__':
	main()
